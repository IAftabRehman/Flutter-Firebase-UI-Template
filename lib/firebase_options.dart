// // File generated by FlutterFire CLI.
// // ignore_for_file: type=lint
// import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
// import 'package:flutter/foundation.dart'
//     show defaultTargetPlatform, kIsWeb, TargetPlatform;
// import 'package:flutter_dotenv/flutter_dotenv.dart';
//
// /// Default [FirebaseOptions] for use with your Firebase apps.
// ///
// /// Example:
// /// ```dart
// /// import 'firebase_options.dart';
// /// // ...
// /// await Firebase.initializeApp(
// ///   options: DefaultFirebaseOptions.currentPlatform,
// /// );
// /// ```
// class DefaultFirebaseOptions {
//   static FirebaseOptions get currentPlatform {
//     if (kIsWeb) {
//       return web;
//     }
//     switch (defaultTargetPlatform) {
//       case TargetPlatform.android:
//         return android;
//       case TargetPlatform.iOS:
//         return ios;
//       case TargetPlatform.macOS:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions have not been configured for macos - '
//               'you can reconfigure this by running the FlutterFire CLI again.',
//         );
//       case TargetPlatform.windows:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions have not been configured for windows - '
//               'you can reconfigure this by running the FlutterFire CLI again.',
//         );
//       case TargetPlatform.linux:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions have not been configured for linux - '
//               'you can reconfigure this by running the FlutterFire CLI again.',
//         );
//       default:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions are not supported for this platform.',
//         );
//     }
//   }
//
//   static final FirebaseOptions web = FirebaseOptions(
//     apiKey: dotenv.env['API_KEY_WEB']!,
//     appId: dotenv.env['APP_ID_WEB']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     authDomain: dotenv.env['AUTH_DOMAIN']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//     measurementId: dotenv.env['MEASUREMENT_ID'],
//   );
//
//   static final FirebaseOptions android = FirebaseOptions(
//     apiKey: dotenv.env['API_KEY_ANDROID']!,
//     appId: dotenv.env['APP_ID_ANDROID']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//   );
//
//   static final FirebaseOptions ios = FirebaseOptions(
//     apiKey: dotenv.env['API_KEY_IOS']!,
//     appId: dotenv.env['APP_ID_IOS']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//     iosBundleId: dotenv.env['IOS_BUNDLE_ID']!,
//   );
// }




// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyB0Tto16efXPPcRR1A-DmSpQhOYGkcoSnk',
    appId: '1:497155402519:web:150255c68d5b8c3a15a552',
    messagingSenderId: '497155402519',
    projectId: 'flutter-firebase-ui-template',
    authDomain: 'flutter-firebase-ui-template.firebaseapp.com',
    storageBucket: 'flutter-firebase-ui-template.firebasestorage.app',
    measurementId: 'G-M4YRPC9RVW',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAuzp__zOKMmX08HSm5LK76DNmXMAjfJ8w',
    appId: '1:497155402519:android:79bfb2220ac14d2f15a552',
    messagingSenderId: '497155402519',
    projectId: 'flutter-firebase-ui-template',
    storageBucket: 'flutter-firebase-ui-template.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyAH71pNp5ra4Dyl0y-ybqIbtyxN8fMsYog',
    appId: '1:497155402519:ios:7f06c9eae05ba3fa15a552',
    messagingSenderId: '497155402519',
    projectId: 'flutter-firebase-ui-template',
    storageBucket: 'flutter-firebase-ui-template.firebasestorage.app',
    iosBundleId: 'com.example.intershipFirstTask',
  );
}